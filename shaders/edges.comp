#version 450

layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;

struct Node {
    vec3 p;
    int i;
    vec3 v;
    float n;
};
layout(std430, binding = 1 ) buffer NodeLocations {
    Node nodes[];
} node_buffer;

struct Edge {
    int n0;
    int n1;
};
layout(std430, binding = 2 ) buffer EdgeLocations {
    Edge edges[];
} edge_buffer;

layout( push_constant ) uniform PushConstants
{
    mat4 transform;
    int edges;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

void dda_line( ivec2 p0, ivec2 p1, vec3 c0, vec3 c1 )
{

    if( p0.x < 0 || p0.y < 0 || p1.x < 0 || p1.y < 0 || p1.x > 1600*2 || p0.x > 1600*2 || p1.y > 1600*2 || p0.y > 1600*2 )
    {
        return;
    }

    ivec2 delta = abs( p1 - p0 );
    ivec2 step = ivec2( sign( p1.x - p0.x ), sign( p1.y - p0.y ) );
    ivec2 offset = delta / 2;
    ivec2 p = p0;
    ivec2 end = p1;
    if( delta.x >= delta.y )
    {
        for( int i = 0; i < delta.x; i++ )
        {
            float t = length(p0 - p) / length(p0 - p1);
            vec3 c = t * c1 + (1. - t ) * c0;

            imageStore( image, p, vec4(c, 1) );
            offset.y += delta.y;
            if( offset.y >= delta.x )
            {
                offset.y -= delta.x;
                p.y += step.y;
            }
            p.x += step.x;
        }
    }
    else
    {
        for( int i = 0; i < delta.y; i++ )
        {
            float t = length(p0 - p) / length(p0 - p1);
            vec3 c = t * c1 + (1. - t ) * c0;

            imageStore( image, p, vec4(c, 1) );
            offset.x += delta.x;
            if( offset.x >= delta.y )
            {
                offset.x -= delta.y;
                p.x += step.x;
            }
            p.y += step.y;
        }
    }
}


void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );

    int id = p.x;
    if( id >= constants.edges ) return;

    Edge e = edge_buffer.edges[id];

    vec4 p1 = constants.transform * vec4(node_buffer.nodes[e.n0].p.xyz, 1);
    vec4 p2 = constants.transform * vec4(node_buffer.nodes[e.n1].p.xyz, 1);

    if( p1.w < 0 || p2.w < 0) return;

    p1 /= p1.w;
    p2 /= p2.w;

    p1.x *= screenSize.x;
    p1.y *= screenSize.y;
    p1.x += screenSize.x / 2.;
    p1.y += screenSize.y / 2.;

    p2.x *= screenSize.x;
    p2.y *= screenSize.y;
    p2.x += screenSize.x / 2.;
    p2.y += screenSize.y / 2.;

    float s = 1.;
    float o = 0.;
    float t0 = o + node_buffer.nodes[e.n0].n * s;
    float t1 = o + node_buffer.nodes[e.n1].n * s;
    vec3 c0 = palette( t0, vec3( 0.1, 0.2, 0.5 ), vec3( 0.1, 0.3, 0.3 ), vec3( 1.0, 0.2, 0.2 ), vec3( 0.1, 0.20, 0.85 ) );
    vec3 c1 = palette( t1, vec3( 0.1, 0.4, 0.5 ), vec3( 0.1, 0.3, 0.3 ), vec3( 1.0, 0.2, 0.2 ), vec3( 0.1, 0.20, 0.85 ) );
    t0 = min(1., max( t0, 0.));
    t1 = min(1., max( t1, 0.));
    c0 = t0 * vec3(1., 1., 0.) + (1. - t0) * vec3(1., 0., 1.) * .2;
    c1 = t1 * vec3(1., 1., 0.) + (1. - t1) * vec3(1., 0., 1.) * .2;

    ivec2 ip1 = ivec2( p1.xy );
    ivec2 ip2 = ivec2( p2.xy );
    dda_line(ip1, ip2, c0, c1);
    dda_line(ip1 + ivec2(1,1), ip2 + ivec2(1,1), c0, c1);
    dda_line(ip1 + ivec2(-1,-1), ip2 + ivec2(-1,-1), c0, c1);
    dda_line(ip1 + ivec2(-1,-2), ip2 + ivec2(-1,-1), c0, c1);
    dda_line(ip1 + ivec2(-1,-3), ip2 + ivec2(-1,-1), c0, c1);
    dda_line(ip1 + ivec2(-1,1), ip2 + ivec2(-1,1), c0, c1);
    dda_line(ip1 + ivec2(1,-1), ip2 + ivec2(1,-1), c0, c1);
}