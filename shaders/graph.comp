#version 450

layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;

struct Node {
    vec3 p;
    int i;
    vec3 v;
    float density;
};
layout(std430, binding = 1 ) buffer Locations {
    Node nodes[];
} positions;

layout( push_constant ) uniform PushConstants
{
    mat4 transform;
    int nodes;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

void circle( vec2 pos, float r, vec3 color ) {
    ivec2 p = ivec2(pos);
    for( float a = 0.0f; a < 2 * 3.14159f; a += 2 * 3.14159f / 190.0f ) {
        imageStore(image, p + ivec2(cos(a) * r, sin(a) * r), vec4(color, 1));
    }
}

#define SCALE 200.

int cell_hash(ivec3 p) {
    int cell_id = 49157 * p.x + 1543 * p.y + 3079 * p.z;
    return cell_id - ( 1000 * int(floor( cell_id / 1000. )));
}

ivec3 cell_index_world(vec3 p) {
    vec3 scaled = p * SCALE;
    return ivec3(floor(scaled.x), floor(scaled.y), floor(scaled.z));
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 color_cell_index(vec3 p) {
    int hash = cell_hash(cell_index_world(p));
    return palette(rand(vec2(hash)).x, vec3(0.5, .3, .15), vec3(.5, .5, .5), vec3(.5, .5, .9), vec3(.1, .3, .2));
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );

    if( p.x >= constants.nodes || p.y > 1 ) return;
    int id = p.x;

    vec4 pos = constants.transform * vec4( positions.nodes[id].p.xyz, 1.0);
    float d = pos.w;
    if( d < 0 ) return;

    pos /= pos.w;

    pos.x *= screenSize.x;
    pos.y *= screenSize.y;
    pos.x += screenSize.x / 2.;
    pos.y += screenSize.y / 2.;

    //float t = length(positions.nodes[id].p) * 20.;
    //vec3 color = palette(t, vec3(0.1, .3, .15), vec3(.3, .8, .1), vec3(.4, .1, .2), vec3(.1, .3, .2));
//        vec3 color = palette(length(positions.nodes[id].v) * 200., vec3(0.5, .3, .15), vec3(.3, .8, .1), vec3(.4, .1, .2), vec3(.1, .3, .2));
//        vec3 color = vec3(length(positions.nodes[id].v) * 100.);

//        circle( pos.xy, 1. / d * 3.1, color);
//        circle( pos.xy, 1. / d * 2.9, color);
//        circle( pos.xy, 1. / d * 1.7, color);
//    }
    vec3 color = vec3(0);
    float t = positions.nodes[id].density;
    t = min(1., max( t, 0.));
    color = t * vec3(1., 1., 0.) + (1. - t) * vec3(1., 0., 1.) * .2;
    float size = 12.f;
    if (t > 0) {
        circle( pos.xy, 1. / d * 0.5 * size, color);
        circle( pos.xy, 1. / d * 0.9 * size, color);
        circle( pos.xy, 1. / d * 0.6 * size, color);
    }

    circle( pos.xy, 1. / d * 1.1 * size, color);
}